// This file was generated by counterfeiter
package runnerfakes

import (
	"sync"

	"github.com/odlp/inflight/runner"
)

type FakeWriterInterface struct {
	WriteToFileStub        func(filePath string, text string)
	writeToFileMutex       sync.RWMutex
	writeToFileArgsForCall []struct {
		filePath string
		text     string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWriterInterface) WriteToFile(filePath string, text string) {
	fake.writeToFileMutex.Lock()
	fake.writeToFileArgsForCall = append(fake.writeToFileArgsForCall, struct {
		filePath string
		text     string
	}{filePath, text})
	fake.recordInvocation("WriteToFile", []interface{}{filePath, text})
	fake.writeToFileMutex.Unlock()
	if fake.WriteToFileStub != nil {
		fake.WriteToFileStub(filePath, text)
	}
}

func (fake *FakeWriterInterface) WriteToFileCallCount() int {
	fake.writeToFileMutex.RLock()
	defer fake.writeToFileMutex.RUnlock()
	return len(fake.writeToFileArgsForCall)
}

func (fake *FakeWriterInterface) WriteToFileArgsForCall(i int) (string, string) {
	fake.writeToFileMutex.RLock()
	defer fake.writeToFileMutex.RUnlock()
	return fake.writeToFileArgsForCall[i].filePath, fake.writeToFileArgsForCall[i].text
}

func (fake *FakeWriterInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.writeToFileMutex.RLock()
	defer fake.writeToFileMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeWriterInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ runner.WriterInterface = new(FakeWriterInterface)
