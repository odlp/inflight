// This file was generated by counterfeiter
package runnerfakes

import (
	"sync"

	"github.com/odlp/inflight/runner"
)

type FakeGrepInterface struct {
	FileAlreadyHasStoryIDStub        func(filePath string) bool
	fileAlreadyHasStoryIDMutex       sync.RWMutex
	fileAlreadyHasStoryIDArgsForCall []struct {
		filePath string
	}
	fileAlreadyHasStoryIDReturns struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGrepInterface) FileAlreadyHasStoryID(filePath string) bool {
	fake.fileAlreadyHasStoryIDMutex.Lock()
	fake.fileAlreadyHasStoryIDArgsForCall = append(fake.fileAlreadyHasStoryIDArgsForCall, struct {
		filePath string
	}{filePath})
	fake.recordInvocation("FileAlreadyHasStoryID", []interface{}{filePath})
	fake.fileAlreadyHasStoryIDMutex.Unlock()
	if fake.FileAlreadyHasStoryIDStub != nil {
		return fake.FileAlreadyHasStoryIDStub(filePath)
	} else {
		return fake.fileAlreadyHasStoryIDReturns.result1
	}
}

func (fake *FakeGrepInterface) FileAlreadyHasStoryIDCallCount() int {
	fake.fileAlreadyHasStoryIDMutex.RLock()
	defer fake.fileAlreadyHasStoryIDMutex.RUnlock()
	return len(fake.fileAlreadyHasStoryIDArgsForCall)
}

func (fake *FakeGrepInterface) FileAlreadyHasStoryIDArgsForCall(i int) string {
	fake.fileAlreadyHasStoryIDMutex.RLock()
	defer fake.fileAlreadyHasStoryIDMutex.RUnlock()
	return fake.fileAlreadyHasStoryIDArgsForCall[i].filePath
}

func (fake *FakeGrepInterface) FileAlreadyHasStoryIDReturns(result1 bool) {
	fake.FileAlreadyHasStoryIDStub = nil
	fake.fileAlreadyHasStoryIDReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeGrepInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fileAlreadyHasStoryIDMutex.RLock()
	defer fake.fileAlreadyHasStoryIDMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeGrepInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ runner.GrepInterface = new(FakeGrepInterface)
